One benefit of using vectors, is that we can insert as many elements we want in a vector, without having to put some size parameter as in an array. In an array of 10 elements,
for adding the 11th one, we’ll have to make an array again.

syntax:
vector<data_type> vector_name;

Vectors provide certain methods to be used to access and utilise the elements of a vector, first one being, the push_back method.
First of all, don't forget to include the header file, <vector>.
Vectors have a method, push_back(), to insert elements in it from the rear end.
We’ll define a variable, size, to store the size of the vector.


#include <iostream>
#include <vector>
using namespace std;

void display(vector<int> &v)   //We want to have a display function to display the contents of the vector. And pass reference of vec1 to the function.
{
    for (int i = 0; i < v.size(); i++)  //We have another method size() which returns the size of the vector. We’ll use this to traverse through all the elements and print them.
    {
        cout << v[i] << " ";
    }
    cout<<endl;
}
int main()
{
    vector<int> vec1;
    int element, size;
    cout << "Enter the size of the array :" ;
    cin >> size;
    for (int i = 0; i < size; i++)
    {
        cout << "Enter the element to add to the list :" ;
        cin >> element;
        vec1.push_back(element);
    }
    vec1.pop_back();
    display(vec1);
    return 0;
}
_________________________________________________________________________
****************Output*****************
Enter the size of the array :3
Enter the element to add to the list :1
Enter the element to add to the list :2
Enter the element to add to the list :3
1 2 
________________________________________________________________________
/*Insert (iterator, element to insert):
This method of vectors inserts an element to the position the iterator is pointing to. Now how to evoke that iterator?
We can generate an iterator using the scope resolution iterator by the following syntax:

vector<int> :: iterator iter = vec1.begin();
Using begin () points the iterator to the starting of the vector. We can now increment the pointer according to our choice and insert any element at that position.
Similarly, v.at(i) can be used instead of v[i].
*/


#include <iostream>
#include <vector>
using namespace std;

void display(vector<int> &v)                
{
    for (int i = 0; i < v.size(); i++)
    {
        //   cout << v[i] << " ";
        cout << v.at(i) << " ";
    }
    cout << endl;
}
int main()
{
    vector<int> vec1;
    int element, size;
    cout << "Enter the size of the array :";
    cin >> size;
    for (int i = 0; i < size; i++)
    {
        cout << "Enter the element to add to the list :";
        cin >> element;
        vec1.push_back(element);
    }
    // vec1.pop_back();
    display(vec1);
    vector<int>::iterator iter = vec1.begin();
    vec1.insert(iter + 1, 5, 566);
    display(vec1);
    return 0;
}
________________________________________________________________________
*********Output**************
Enter the size of the array :3
Enter the element to add to the list :1
Enter the element to add to the list :2
Enter the element to add to the list :3
1 2 3 
1 566 566 566 566 566 2 3
__________________________________________________________________________
#include <iostream>
#include <vector>
using namespace std;

template <class T>                   // templatise the display function.
void display(vector<T> &v)

{
    cout << "Displaying this vector :" << endl;
    for (int i = 0; i < v.size(); i++)
    {
        cout << v.at(i) << " ";
    }
    cout << endl;
}
int main()
{
    //Ways to create a vector
    vector<int> vec1;        //zero length integer vector
    vector<char> vec2(4);    //4-element character vector
    vector<char> vec3(vec2); //4-element character vector from vector 2
    vector<int> vec4(6, 2);  //6-element printing 2
    vec2.push_back('5');
    vec3.push_back('1');
    display(vec1);
    display(vec2);
    display(vec3);
    display(vec4);
    cout << vec4.size();
    return 0;
}
_____________________________________________________________________________
*************Output*************
Displaying this vector :

Displaying this vector :
    5
Displaying this vector :
    1
Displaying this vector :
2 2 2 2 2 2
6
