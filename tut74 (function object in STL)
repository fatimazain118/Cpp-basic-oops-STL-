/*What is a function object?

A function object is a function wrapped in a class so that it is available as an object.

That is, we can then use a function as an object. The question that might have been raised in your mind would be, why to substitute a function with an object? The answer is 
to make them all usable in an Object-Oriented Programming paradigm.

Be sure to include the header file < functional> before you do anything else.
And let’s create an array of some 6 elements.
Suppose we want to sort this array in ascending order. So we’ll include a header file <algorithm> and write the syntax of the sort object which is,

sort(address of first element, address of last element);

But what if we wanted to sort the same array in descending order, since the sort function can default sort in ascending order only? So, here comes our saviour,
functional objects. Our sort function also takes a third parameter which is a functor ( functional object).

greater<int>().   This functor helps to sort in descending order
*/

#include <iostream>
#include <functional>
#include <algorithm>
using namespace std;

int main()
{
    int arr[] = {2, 1, 6, 3, 33, 5};
    // sort(arr, arr+4);     //sort the element upto index 4
    sort(arr, arr + 6, greater<int>());
    for (int i = 0; i < 6; i++)
    {
        cout << arr[i] << endl;
    }
    return 0;
}
________________________________________________________________________
**************Output***************
33
6
5
3
2
1
