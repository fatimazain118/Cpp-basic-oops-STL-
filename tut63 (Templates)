What is a template in C++ programming?

 A template is believed to escalate the potential of C++ several fold by giving it the ability to define data types as parameters making it useful to reduce repetitions
 of the same declaration of classes for different data types. Declaring classes for every other data type(which if counted is way too much) in the very first place violates 
 the DRY( Donâ€™t Repeat Yourself) rule of programming and on the other doesn't completely utilise the potential of C++.

 It is very analogous to when we said classes are the templates for objects, here templates itself are the templates of the classes. That is, what classes are for objects, 
templates are for classes.

Why templates?

1-)DRY Rule:
2-)Generic Programming:
It is called generic, because it is sufficient to declare a template once, it becomes general and it works all along for all the data types.


Understanding the syntax below:

First, we declare a template of class and pass a variable T as its parameter.
Define the class of vector and keep the data type of *arr as T only. Now, the array becomes of the type we supply in the template.


#include <iostream>
using namespace std;
 
template <class T>
class vector {
    T *arr;
    int size;
    public:
        vector(T* arr)[
            //code
        ]
        //and many other methods
    
};
 
int main() {
    vector<int> myVec1();
    vector<float> myVec2();
    return 0;
}
