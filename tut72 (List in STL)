//A List is a bi-directional linear storage of elements. Few key features as to why a list should be used is, 

It gives faster insertion and deletion operations.
Its access to random elements is slow.
What makes a list different from an array?

An array stores the elements in a contiguous manner in which inserting some element calls for a shift of other elements, which is time taking. But in a list, we can simply 
change the address the pointer is pointing to.

And push_back a few elements, and pass the list to a display function via reference.
Due to the fact that a list element cannot be directly accessed by its index, we must traverse through each element and print them.
We define a list iterator using this syntax:
     list<int> :: iterator it;

#include <iostream>
#include <list>
using namespace std;

void display(list<int> &lst)
{
    list<int>::iterator it;
    for (it = lst.begin(); it != lst.end(); it++)
    {
        cout << *it << " ";           //We dereference the list iterator, using * to print the element at that index.
    }
}
int main()
{
    list<int> list1; //empty list of size 0
    list1.push_back(5);
    list1.push_back(4);
    list1.push_back(6);
    list1.push_back(7);
    list1.push_back(8);
    list1.push_back(9);
    display(list1);
    
    list1.sort();
    display(list1);
    
    list1.reverse();
    display(list1);
    
    list<int> list2(3);   //empty list of length 3
    list2.push_back(2);
    list2.push_back(12);
    list2.push_back(20);
    display(list
    return 0;
}
__________________________________________________________________
***********Output*************
5 4 6 7 8 9 
4 5 6 7 8 9      //sorted list1
9 8 7 6 5 4      //reverse sorted list
0 0 0 2 12 20
__________________________________________________________________
#include <iostream>
#include <list>
using namespace std;

void display(list<int> &lst)
{
    list<int>::iterator it;
    for (it = lst.begin(); it != lst.end(); it++)
    {
        cout << *it << " ";
    }
    cout << endl;
}
int main()
{
 list<int> list2(6); //empty list of length 6
   list<int>::iterator it;
    it = list2.begin();
    *it = 45;
    it++;
    *it = 5;
    it++;
    *it = 4;
    it++;
    *it = 4;
    it++;
    *it = 46;
    it++;
    *it = 44;
    it++;

    display(list2);
    list2.pop_back();
    display(list2);

    list2.pop_front();
    display(list2);

    list2.remove(4); //remove particular elment all occurrence
    display(list2);

    return 0;
}
___________________________________________________________________________
************Output******************
45 5 4 4 46 44
45 5 4 4 46
5 4 4 46
5 46 
_______________________________________________________________________________
#include <iostream>
#include <list>
using namespace std;

void display(list<int> &lst)
{
    list<int>::iterator it;
    for (it = lst.begin(); it != lst.end(); it++)
    {
        cout << *it << " ";
    }
    cout << endl;
}
int main()
{
    list<int> list1; //empty list of size 0
    list1.push_back(5);
    list1.push_back(4);
    list1.push_back(6);
    list1.push_back(7);
    list1.push_back(8);
    list1.push_back(9);

    cout << "List 1 :" << endl;
    display(list1);
    
    list<int> list2(6);
    list<int>::iterator it;
    it = list2.begin();
    *it = 45;                     //We can also enter elements in a list using the iterator and its dereferencer.
    it++;
    *it = 5;
    it++;
    *it = 4;
    it++;
    *it = 4;
    it++;
    *it = 46;
    it++;
    *it = 44;
    it++;
    cout << "List2 : " << endl;
    display(list2);
    
    list1.sort();
    list2.sort();
    list1.merge(list2);
    cout << "List 1 after merging : " << endl;
    display(list1);

    return 0;
}
__________________________________________________________________
***********Output************
List 1 :
5 4 6 7 8 9
List2 :
45 5 4 4 46 44
List 1 after merging :
4 4 4 5 5 6 7 8 9 44 45 46
____________________________________________________________________
