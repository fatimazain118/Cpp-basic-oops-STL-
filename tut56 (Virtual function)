/* Virtual Functions in C++
A member function in the base class which is declared using virtual keyword is called virtual functions. They can be redefined in the derived class.

The main thing to note here is that if we don’t use the “virtual” keyword with the “display” function of the base class then beside of the point that we have pointed our base
call pointer to derived class object still the compiler would have called the “display” function of the base class because this is its default behavior 

But we have used the “virtual” keyword with the “display” function of the base class to make is virtual function so when the display function is called by using the base class 
pointer the display function of the derived class will run because the base class pointer is pointing to the derived class object. */

#include <iostream>
using namespace std;

class Base
{

public:
    int var_base;                   //We created a class “Base” class which contains public data member “var_base” and member function “display”.
   
    virtual void Display()                 //virtual lgane se jab pointer call krega display function tb wo derived class ka he krega run
    {
        cout << "1.Displaying Base Class variable var_base\n"             // The member function “display” will print the value of data member “var_base”
             << var_base << endl;
    }
};

class Derived : public Base
{

public:
    int var_Derived =3;
    void Display()
    {
        cout << "2.Displaying Derived Class variable var_Derived\n"
             << var_Derived << endl;
        cout << "2.Displaying Base Class variable var_base\n"
             << var_base << endl;
    }
};

int main()
{
    Base obj_base;
    Derived obj_derived;
    Base *base_class_pointer;

    base_class_pointer = &obj_derived;
    base_class_pointer->var_base = 34;
    base_class_pointer->Display();
    return 0;
}
_________________________________________________________________________________________________________________
****************Output**************
2.Displaying Derived Class variable var_Derived
3
2.Displaying Base Class variable var_base
34
