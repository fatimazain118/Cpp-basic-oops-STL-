#include <iostream>
using namespace std;

class Complex                                  //Friend functions are those functions that have the right to access the private data members of class even though they are not defined inside the class. It is necessary to write the prototype of the friend function. One main thing to note here is that if we have written the prototype for the friend function in the class it will not make that function a member of the class
{

    int a, b;

public:
    void SetNumber(int n1, int n2)
    {
        a = n1;
        b = n2;
    }
friend Complex sumComplex(Complex o1, Complex o2);                    //coz ye a , b ye private data hai wo access krna chahra tha
  
    void printNumber()
    {
        cout << "Your complex no. is " << a << " + " << b << "i "<< endl;
    }
};

  Complex sumComplex(Complex o1, Complex o2)
    {
        Complex o3;                                             //o3 object bnaya hai
        o3.SetNumber((o1.a + o2.a), (o1.b + o2.b));
        return o3;
    }
int main()
{
    Complex c1, c2, sum;
    c1.SetNumber(1, 4);
    c2.SetNumber(5, 8);
    c1.printNumber();
    c2.printNumber();
    sum = sumComplex(c1,c2);
    sum.printNumber();
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------
**********************Output**********************************

Your complex no. is 1 + 4i 
Your complex no. is 5 + 8i
Your complex no. is 6 + 12i

------------------------------------------------------------------------------------------------------------------------------
***********************************Properties of Friend Function*************************************
Not in the scope of the class
Since it is not in the scope of the class, it cannot be called from the object of that class, for example, sumComplex() is invalid
A friend function can be invoked without the help of any object
Usually contain objects as arguments
Can be declared under the public or private access modifier, it will not make any difference
It cannot access the members directly by their names, it needs (object_name.member_name) to access any member, like cout<<a; --->invalid
