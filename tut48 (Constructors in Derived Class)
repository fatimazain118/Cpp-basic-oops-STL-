#include <iostream>
using namespace std;

class Base1
{
    int data1;

public:
    Base1(int a)
    {
        data1 = a;
        cout << "Base1 class constructor is called" << endl;
    }
    void printDataBase1(void)
    {
        cout << "Data1 is :" << data1 << endl;
    }
};
class Base2
{
    int data2;

public:
    Base2(int b)
    {
        data2 = b;
        cout << "Base2 class constructor is called" << endl;
    }

    void printDataBase2(void)
    {
        cout << "Data2 is :" << data2 << endl;
    }
};

class Derived : public Base1, public Base2                             //base class jo pehle bnna wo pehle call hota
{
    int derived1, derived2;

public:
    Derived(int p, int q, int r, int s) : Base1(p), Base2(q)                   //Syntax for using constructors in Derived class
    {
        derived1 = r;
        derived2 = s;
        cout << "We are inside derived constructor" << endl;
    }
    void printDataDerived(void)
    {
        cout << "The value of derived1 is :" << derived1 << endl;
        cout << "The value of derived2 is :" << derived2 << endl;
    }
};

int main()
{
    Derived d(2, 4, 5, 6);
    d.printDataBase1();
    d.printDataBase2();
    d.printDataDerived();
    return 0;
}
______________________________________________________________________________________________
**********Output********
Base1 class constructor is called
Base2 class constructor is called
We are inside derived constructor
Data1 is :2
Data2 is :4
The value of derived1 is :5
The value of derived2 is :6


/*
Case1:
class B: public A{
   // Order of execution of constructor -> first A() then B()
};

Case2:
class A: public B, public C{
    // Order of execution of constructor -> B() then C() and A()
};

Case3:
class A: public B, virtual public C{
    // Order of execution of constructor -> C() then B() and A()
};

*/
